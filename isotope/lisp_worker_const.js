const lispStringUrl = 'data:text/javascript;base64,// A tiny lisp for scripting purposes. Sync with lisp.js
// Emulate a stack to avoid infinite loops.

// TODO - finish language implementation.

// Valid types
/*
  tagged:
  expr  fnop  macro  (error)

  native:
  bigint  atom  list  map  bool  null
*/

const arity = {
  // Binary
  '+': 2, '-': 2, '*': 2, '/': 2, '^': 2, '%': 2,
  '>': 2, '<': 2, '=': 2, '>=': 2, '<=': 2, '!=': 2,
  'b<<': 2, 'b>>': 2, 'b&': 2, 'b|': 2, 'b^': 2,
  // Unary
  'b~': 1, 'neg': 1,
  // List-like
  'range': 2, 'enum': 1, 'map': 2, 'filter': 2, 'foldl': 3, 'foldr': 3,
  'get': 2, 'set': 3, 'joinall': 1, 'size': 1, 'slice': 3,
  'list:': 'VARIABLE',  // list constructor
  // Map-like
  'map->list': 1, 'list->map': 1,
  'map:': 'VARIABLE',  // map constructor
  // Symbols
  'sym->str': 1, 'str->sym': 1,
  'atom?': 1, 'list?': 1, 'map?': 1,
  'list->cons': 1, 'cons->list': 1,
};

function numericFunction(fn) {
  return (...args) => {
    if (args.every((x) => typeof x === 'bigint')) {
      return fn(...args);
    } else {
      return '#err/needs-numeric-inputs';
    }
  };
}

function atomicFunction(fn) {
  return (...args) => {
    if (args.every(isAtomic)) {
      return fn(...args);
    } else {
      return '#err/needs-atomic-inputs';
    }
  };
}

const operators = {
  // Binary
  '+': numericFunction((a, b) => a + b),
  '-': numericFunction((a, b) => a - b),
  '*': numericFunction((a, b) => a * b),
  '/': numericFunction((a, b) => b === 0n ? '#err/div-0' : a / b),
  '%': numericFunction((a, b) => b === 0n ? '#err/mod-0' : a % b),
  '^': numericFunction((a, b) => a ** b),
  '>': atomicFunction((a, b) => a > b),
  '<': atomicFunction((a, b) => a < b),
  '=': atomicFunction((a, b) => a === b),
  '>=': atomicFunction((a, b) => a >= b),
  '<=': atomicFunction((a, b) => a <= b),
  '!=': atomicFunction((a, b) => a !== b),
  'b<<': numericFunction((a, b) => a << b),
  'b>>': numericFunction((a, b) => a >> b),
  'b&': numericFunction((a, b) => a & b),
  'b|': numericFunction((a, b) => a | b),
  'b^': numericFunction((a, b) => a ^ b),
  // Unary
  'b~': numericFunction((a) => ~a),
  'neg': numericFunction((a) => -a),
  // List-like
  'range': numericFunction((a, b) => {
    const ans = [];
    for (let i = a; i < b; i++) ans.push(i);
    return ans;
  }),
  'enum': (list) => {
    if (! isList(list)) return '#err/enum-non-list';
    const ans = [];
    for (let i = 0; i < list.length; i++) ans.push ([[i, list[i]]]);
  },
  // TODO: fix all things with functions.
  'map': (f, list) => list.map((e) => lispApply(f, [e])),
  'filter': (f, list) => list.filter((e) => lispApply(f, [e])),
  'foldl': (f, seed, list) => {
    for (const y of list) seed = lispApply(f, [seed, y]);
    return seed;
  },
  'foldr': (f, seed, list) => {
    for (let i = list.length - 1; i >= 0; i--) {
      const y = list[i];
      seed = lispApply(f, [seed, y]);
    }
    return seed;
  },
  'get': (ind, list) => {
    if (list instanceof Array) {
      return list[ind] ?? null;
    } else if (list instanceof Map) {
      return list.get(ind) ?? null;
    } else {
      return '#err/attempted-get';
    }
  },
  'set': (ind, elem, list) => {
    if (list instanceof Array) {
      if (ind >= Number(list.length)) {
        return list.concat([elem]);
      } else if (ind < 0n) {
        return [elem].concat(list);
      } else {
        const ans = [...list];
        ans[ind] = elem;
        return ans;
      }
    } else if (list instanceof Map) {
      const ans = new Map(list);
      ans.set(ind, elem);
      return ans;
    } else {
      return '#err/attempted-set';
    }
  },
  'slice': (from, to, list) => {
    if (from instanceof BigInt && to instanceof BigInt && isList(list))
      return list.slice(Number(from), Number(to));
    else return '#err/attempted-slice';
  },
  'joinall': (listOfLists) => {
    if (! isList(listOfLists)) return '#err/attempted-joinall';
    const ans = [];
    for (const list of listOfLists) {
      if (isList(list)) for (const y of list) {
        ans.push (y);
      }
    }
    return ans;
  },
  'size': (list) => {
    if (list instanceof Array) {
      return BigInt(list.length);
    } else if (list instanceof Map) {
      return BigInt(list.size);
    } else return '#err/sizeof-non-collection';
  },
  'list:': (...args) => args,
  'map->list': (m) => [...m],
  'list->map': (l) => new Map(l),
  'map:': (...args) => {
    const ans = new Map();
    for (var i = 0; i < args.length; i += 2) {
      ans.set(args[i], args[i+1]);
    }
    return ans;
  },
  'sym->str': (sym) => [...sym].map((x) => BigInt(x.codePointAt(0))),
  'str->sym': (str) => str.map((x) => String.fromCodePoint(Number(x))).join(''),
  'list->cons': (list) => {
    if (! isList(list)) return '#err/list->cons-non-list';
    let ans = null;
    for (let i = list.length - 1; i >= 0; i--) ans = [list[i], ans];
    return ans;
  },
  'cons->list': (cons) => {
    let ans = [], head = cons;
    while(isList(head) && head.length === 2) {
      ans.push(head[0]);
      head = head[1];
    }
    return ans;
  },
  'atom?' : isAtomic,
  'list?' : isList,
  'map?' : isMap,
};

const builtinFunctions = new Set(Object.keys(operators));

// Alternate frame structure:
// [type form env subindex]
// env may be null for literals
// subindex may be null for those that won't matter

// Stack:
// [frame ...]
// Each frame:
// [expr form env -] :: before evaluation
// [fnop form env index] :: during evaluation
// Notice! For a fnop like (+ x y), args is [+, x, y], because the function head has to be evaluated too.
// [macro form env index] - if, let, letrec, and, or
// [literal form - -] - after expansion
// [closure form env -] - lambda closure, cannot expand further
// [error reason - -] - error, stopping the evaluation
//
// General stack structure:
// [fnop/macro . fnop/macro . . . fnop/macro . <any>]

/*
  Structure of a general program.
  atom : atomic literals
  (fn ...args) : function application
  (apply fn list) : apply list
  (list ...args) : list generation
  (' x) : literal
  ([and, or] ...args) : boolean operation
  (if p1 a1 p2 a2 p3 a3 ... pn an xn) : cond
  (let x1 y1 x2 y2 ... xn yn body) : let
  (letrec x1 f1 x2 f2 ... xn fn body) : let recursive
  (: arglist body) : function with argument list
  (get nth list), (set nth list obj) : list operation

  Ideally built-in things: map, filter, fold(l/r)
*/

function stepStack (stack) {
  const frame = stack.pop ();
  // if (valType(frame) === null) {stack.push(frame); return;}
  const type = valType(frame);
  let form = null, env = null, subindex = null;
  if (isCompoundFrame(frame)) {
    form = frame.form; env = frame.env; subindex = frame.subindex;
  }
  // Handle each case.
  if (type === 'expr') {
    if (! isList(form)) {
      // Atom
      if (typeof form !== 'string') {
        // Literal
        stack.push (form);
      } else if (['true', 'false'].includes(form)) {
        stack.push (form === 'true');
      } else if (form.match (/^[+-]?[0-9]+$/)) {  // Number
        stack.push (BigInt(form));
      } else if (form.startsWith ('#')) {  // Symbol
        stack.push (form);
      } else if (builtinFunctions.has (form)) {
        stack.push (form);  // Built-in function.
      } else {
        // Look up in environment.
        if (! env.has(form)) {
          stack.push(frame);
          stack.push('#err/var-unfound');
        } else {
          stack.push (env.get(form));
        }
      }
    } else if (form.length <= 0) {
      stack.push ([]);
    } else {
      const head = form[0];
      if (['if', 'let', "'"].includes (head)) {
        // Macro.
        stack.push ({type: 'macro', form: [... form], env, subindex: 1});
      } else if ([':'].includes(head)) {
        // Function definition.
        const [_colon, fnvars, fnbody, fncaptures] = form;
        const newEnv = new Map();
        for (const varName of (fncaptures || [])) {
          newEnv.set(varName, env.get(varName));
        }
        stack.push ([_colon, fnvars, fnbody, newEnv]);
      } else {
        // Function application.
        stack.push ({type: 'fnop', form: [... form], env, subindex: 0});
      }
    }
  } else if (type === 'fnop') {
    if (subindex >= form.length) {
      const head = form[0];
      if (builtinFunctions.has(head)) {
        const answer = operators[head](... form.slice(1));
        if (isErr(answer)) stack.push(frame);
        stack.push (answer);
      } else if (head[0] === ':' && head.length >= 3) {
        // Custom-defined function
        const [_colon, fnvars, fnbody, fncaptures] = head;
        const env = fncaptures ? new Map(fncaptures) : new Map();
        for (var i = 0; i < fnvars.length; i++) {
          env.set(fnvars[i], form[i]);
        }
        stack.push({type: 'expr', form: fnbody, env});
      }
    } else {
      const subform = frame.form[subindex];
      frame.form[subindex] = '.wait';
      stack.push (frame);
      stack.push ({type: 'expr', form: subform, env});
    }
  } else if (type === 'macro') {
    const head = form[0];
    if (head === 'if') {
      if (form.length !== 4) {
        stack.push(frame);
        stack.push('#err/if-length-error');
        return 'done';
      }
      if (subindex === 2) {
        // Cond
        if (form[1]) {
          // Evaluates to val1
          stack.push ({type: 'expr', form: form[2], env});
        } else {
          // Evaluates to rest
          stack.push ({type: 'expr', form: form[3], env});
        }
      } else {
        // Unevaluated yet
        stack.push (frame);
        stack.push ({type: 'expr', form: form[1], env});
      }
    } else if (head === 'let') {
      // (let x y expr)
      if (form.length !== 4) {
        stack.push(frame);
        stack.push('#err/let-length-error');
        return 'done';
      }
      const [_, x, y, expr] = form;
      if (subindex === 1) {
        // compute y first
        stack.push({type, form, env, subindex: 2});
        stack.push({type: 'expr', form: y, env, subindex: 0});
      } else if (subindex === 2) {
        // can move forward
        const nextFrame = {type: 'expr', form: expr, env: withVal(env, x, y)};
        stack.push(nextFrame);
      }
    } else if (head === "'") {
      if (form.length !== 2) {
        stack.push(frame);
        stack.push("#err/'-length-error");
        return 'done';
      }
      stack.push (form[1]);
    } else {
      stack.push(frame); stack.push("#err/unrecognized-macro");
      return 'done';
    }
  } else if (isErr(frame)) {
    stack.push(frame);
    return 'done';
  } else if (isLiteralFrame(type)) {
    // Done, go to previous one
    const value = frame;
    if (stack.length > 0) {
      const parent = stack[stack.length - 1];
      if (! ['fnop', 'macro'].includes(parent.type)) {
        throw new Error ('Error! Incorrect parent.type', parent.type, stack);
        return 'done';
      }
      parent.form[parent.subindex] = value;
      if (parent.type === 'fnop' || parent.form[0] === 'if') parent.subindex ++;
    } else {
      stack.push (frame);
      return 'done';
    }
  } else if (type === 'error') {
    return 'done';
  } else {
    throw new Error ('Error! Unrecognized frame type.');
  }
}

function evaluate (sexp, options) {
  options = options || {};
  var limit = options.limit || 2000;
  const showSteps = [true, false].includes(options.showSteps) ? options.showSteps : true;
  const stack = [{
    type: 'expr',
    form: sexp,
    env: options.env || new Map(),
  }];
  while (limit > 0) {
    const status = stepStack (stack);
    if (status === 'done') break;
    limit--;

    if (showSteps) {
      // console.log (dispStack(stack));
      // console.log (elem('hr'));
    }
  }
  return stack;
}

function isAtom (obj) { return typeof obj === 'string'; }

function isList (obj) { return obj instanceof Array; }

function isMap (obj) { return obj instanceof Map; }

function isNull (obj) { return obj === null || obj === undefined; }

function isVar (obj) { return isAtom(obj) && obj.startsWith('_'); }

function isSym (obj) { return isAtom(obj) && obj.startsWith('#'); }

function isErr (obj) { return isAtom(obj) && obj.startsWith('#err/'); }

function findVal (env, atom) { return env.get (atom); }

function isAtomic (val) {
  return ! (isList(val) || isMap(val));
}

function isCompoundFrame (val) {
  return ['macro', 'fnop', 'expr'].includes(valType(val));
}

function isLiteralFrame (val) { return ! isCompoundFrame(val); }

function isComplete (stack) {
  return stack.length === 1 && (stack[0].type || null === null);
}

function withVal (env, key, val) {
  const ans = new Map(env);
  ans.set(key, val);
  return ans;
}

// Returns the type of a value.
function valType (val) {
  if ([true, false, null, undefined].includes(val)) {
    return 'special';
  } else if (typeof val === 'bigint') {
    return 'bigint';
  } else if (typeof val === 'string') {
    return 'atom';
  } else if (val instanceof Array) {
    return 'list';
  } else if (val instanceof Map) {
    return 'map';
  } else if (typeof val === 'object') {
    if (typeof val.type === 'string') return val.type;
  } else {
    throw new Error (`Unrecognized type ${val}: ${typeof val}`);
  }
}

// Sync with prepro.js

// Lisp preprocessor.

/** TODO - Preprocessor format
    (part1 | part2 | ... | partn) <-- ignored for now.
    => (partn (partn-1 ... (part2 part1)))
    (part1 @ part2 @ ... @ partn)
    => (part1 (part2 ... (partn-1 partn)))
    if _ exists, replaces _.

    (cond c1 a1 c2 a2 ... cn an) <-- can be if c1 a2 @ if c2 a2 @ ...
    (and c1 c2 ... cn)
    (or c1 c2 ... cn)

    Example for recursion.
    let 2xp (: [2xp x] @ if (= x 0) 1 @ * 2 @ 2xp @ - x 1) (2xp 3)

    let fact-primitive (: [fact-prim x acc] @ if (= x 0) acc @ fact-prim (- x 1) (* x acc)) @
    let fact (: [null x] [fact-prim x 1] [fact-prim]) @
    fact 5
**/

function hasUnder(sexp) {
  return sexp === '_' || isList(sexp) && sexp.some(hasUnder);
}

function replaceUnder(sexp, w) {
  if (isList(sexp)) return sexp.map((x) => replaceUnder(x, w));
  return sexp === '_' ? w : sexp;
}

function prepro(code) { return prepro_2(prepro_1(code)); }

function prepro_1(code) {
  if (isAtomic(code)) return code;
  const parts = code.map(prepro_1);

  // Handle @
  const stack = [[]];
  for (const y of parts) {
    if (y !== '@') stack[stack.length-1].push(y);
    else stack.push([]);
  }
  while(stack.length > 1) {
    const tail = stack.pop();
    const pretail = stack.pop();
    const newtail = hasUnder(pretail) ? replaceUnder(pretail, tail) : pretail.concat([tail]);
    stack.push(newtail);
  }
  return stack[0];

  // Handle cond => can replace with if
  // Handle and, or
  // return parts;
}

function prepro_2(code) {
  if (isAtomic(code)) return code;
  const parts = code.map(prepro_2);
  if (parts[0] === 'and') {
    let ans = true;
    for (let i = parts.length-1; i >= 1; i--) {
      ans = ['if', parts[i], ans, false];
    }
    return ans;
  } else if (parts[0] === 'or') {
    let ans = false;
    for (let i = parts.length-1; i >= 1; i--) {
      ans = ['if', parts[i], true, ans];
    }
    return ans;
  } else return parts;
}

function parse (input) {
  // Rewritten parse.

  const s = {tokens: [], last: [], depth: 0};
  const flush = () => {
    const token = s.last.join('').trim();
    s.last = [];
    if (token.length > 0) { s.tokens.push(token); }
  };    

  for (const c of input) {
    if (s.depth > 0) {
      s.last.push(c);
      if (c === '{') s.depth ++;
      else if (c === '}') {
        s.depth --;
        if (s.depth <= 0) flush();
      }
    } else if (c === '{') {
      flush(); s.last.push(c); s.depth ++;
    } else if (c === '}') {
      return null;    // Parsing error
    } else if ('()[]'.includes(c)) {
      flush(); s.last.push(c); flush();
    } else if (' \t\n'.includes(c)) {
      flush();
    } else {
      s.last.push(c);
    }
  }
  flush();

  if (s.depth != 0) return null;   // Parsing error

  const stack = [[]];
  for (const t of s.tokens) {
    if (['[', '('].includes(t)) stack.push([]);
    else if ([')', ']'].includes(t)) {
      const tail = stack.pop();
      if (stack.length <= 0) return null;
      stack[stack.length - 1].push(tail);
    } else {
      stack[stack.length - 1].push(t);
    }
  }

  if (stack.length !== 1) return null;
  return stack[0];
}

function parseOne (input) {
  return parse(input) [0];
}

function parseLenient (input) {
  try {
    return parse(input);
  } catch (e) {
    if (e instanceof SyntaxError) {
      return null;
    } else {
      throw e;
    }
  }
}

function parseOneLenient (input) {
  const ans = parseLenient(input);
  if (!ans) return null;
  return ans[0];
}

function translateLiteral(expr) {
  if (expr instanceof Array) {
    return expr.map(translateLiteral);
  } else if (typeof(expr) === 'string') {
    if (expr.match(/^[-]?[0-9]+$/)) return BigInt(expr);
    if (['true', 'false', 'null'].includes(expr)) return {'true': true, 'false': false, 'null': null}[expr];
    return expr;
  } else {
    return expr;
  }
}

function deepParse(input) { return translateLiteral(parseOne(input)); }
function preproDeepParse(input) { return prepro(translateLiteral(parseOne(input))); }

/// Performs a simple match between pattern and sexp.
/// Remember, it returns an object {success, map},
/// and in a boolean, only check for .success
function simpleMatch (pattern, sexp, vars = null) {
  const _isVar = (vars === null) ? isVar : ((v) => vars.includes(v));

  if (_isVar (pattern)) {
    return {success: true, map: new Map([[pattern, sexp]])};
  } else if (isAtom (pattern)) {
    if (eq (pattern, sexp)) {
      return {success: true, map: new Map([])};
    } else {
      return {success: false, cause: `${pattern} -> ${sexp} atom_mismatch`};
    }
  } else {
    // isList
    if (isAtom (sexp)) {
      return {success: false, cause: `${pattern} -> ${sexp} atom`};
    } else if (pattern.length !== sexp.length) {
      return {success: false, cause: `${pattern} -> ${sexp} length_mismatch`};
    } else {
      var totalMatch = {success: true, map: new Map([])};
      for (var i = 0; i < pattern.length; i++) {
        const match = simpleMatch (pattern[i], sexp[i]);
        combineMatch (totalMatch, match);
        if (! totalMatch.success) {
          return totalMatch;
        }
      }
      return totalMatch;
    }
  }
}

function combineMatch (oldMatch, newMatch) {
  if (! oldMatch.success) return;
  if (! newMatch.success) {
    oldMatch.success = false;
    oldMatch.cause = newMatch.cause;
    return;
  }
  for (const x of newMatch.map.keys ()) {
    if (oldMatch.map.has(x)) {
      if (eq(oldMatch.map.get(x), newMatch.map.get(x))) { /*good*/ }
      else {
        oldMatch.success = false;
        oldMatch.cause = `${x} -> ${oldMatch.map.get(x)}, ${newMatch.map.get(x)}`;
        return;
      }
    } else {
      oldMatch.map.set(x, newMatch.map.get(x));
    }
  }
}

function replaceAll (sexp, map) {
  if (isAtom (sexp)) {
    return map.has (sexp) ? map.get(sexp) : sexp;
  } else {
    return sexp.map ((child) => replaceAll (child, map));
  }
}

/// If two sexps are equal.
function eq (a, b) {
  return str(a) === str(b);
}

// Sexp to string.
function str (obj) {
  if (isAtomic(obj)) return `${obj}`;
  else if (isMap(obj)) return `[!map ${[...obj]}]`;
  else return '[' + obj.map (str).join(' ') + ']';
}

// Pretty-print
function pprint(obj, indent = '', hasIndent = false) {
  const ans = [];
  if (hasIndent) ans.push(indent);

  if (isList(obj)) {
    if (obj[0] === 'node') {
      ans.push('[');
      for (let i = 0; i < obj.length; i++) {
        if (i > 0) ans.push(' ');

        const term = obj[i], isSubs = (i === Subs) && isList(term) && term.length > 0;
        if (isSubs) {
          ans.push('[\n');
          for (const sub of term) {
            ans.push(pprint(sub, indent + '  ', true));
            ans.push('\n');
          }
          ans.push(indent + ']');
        } else {
          ans.push(str(term));
        }
      }
      ans.push(']');
    } else ans.push(str(obj));
  } else ans.push(str(obj));

  return ans.join('');
}

function hasMember(arr, elem) {
  return arr.some((x) => eq(x, elem));
}

function delMember(arr, elem) {
  return arr.filter((x) => !eq(x, elem));
}

function setEquals(A, B) {
  const describe = (set) => [... new Set(set.map(str))].sort();
  return eq(describe(A), describe(B));
}

function _sexpWalk(sexp, prefix, pushTo) {
  pushTo.push([[...prefix], sexp]);

  if (isList (sexp)) {
    for (let i = 0; i < sexp.length; i++) {
      prefix.push(i);
      _sexpWalk(sexp[i], prefix, pushTo);
      prefix.pop();
    }
  } else {    }
}

function sexpWalk(sexp) {
  const pushTo = [];
  const prefix = [];
  _sexpWalk (sexp, prefix, pushTo);
  return pushTo;
}

// Avoid using stepStack, but use a simple calling structure.

/**
Syntax

(fn a1 a2 ... aN) ⇒ evaluate
(set X Y) ⇒ set, in the current function (scope)
(use X) ⇒ consume X and return its value
(: [a1 a2 ... aN] [captures] @ step1 step2 ... stepN) ⇒ do step1, ..., stepN, return result of stepN
(do e1 e2 ... eN)

if, loop (checks 'break'), and, or, "'" → standard macros
 **/

function lispEvaluate (obj, env = null) {
  env = env || {};

  if (isList(obj)) {
    if (obj.length === 0) {
      return [];
    }

    const [head, ...args] = obj;

    if (head === 'if') {
      const [a, b, c] = args;
      const cond = lispEvaluate (a, env);
      if (cond) return lispEvaluate (b, env);
      else return lispEvaluate (c, env);
    } else if (head === 'loop') {
      while (1) {
        const [sub] = args;
        lispEvaluate (sub, env);
        if (env.break) break;
      };
    } else if (head === 'and') {
      for (const a of args) {
        const val = lispEvaluate (a, env);
        if (val) continue; else return false;
      }
      return true;
    } else if (head === 'or') {
      for (const a of args) {
        const val = lispEvaluate (a, env);
        if (val) return true; else continue;
      }
      return false;
    } else if (head === "'") {
      return args[0];
    } else if (head === 'set') {
      const [a, b] = args;
      const v = lispEvaluate (b, env);
      env[a] = v;
      return v;
    } else if (head === 'use') {
      const [a] = args;
      const v = env[a];
      delete env[a];
      return v;
    } else if (head === 'do') {
      let v = null;
      for (const a of args) {
        v = lispEvaluate (a, env);
        console.log('after do-evaluate', env);
      }
      return v;
    } else if (head === ':') {
      // Constructs a function block, with captures.
      let params, captures=[], body;
      if (args.length === 2) {
        [params, body] = args;
      } else {
        [params, captures, body] = args;
      }

      // Find current captures
      const capturedValues = captures.map ((a) => [a, env[a]]);
      return [':', params, capturedValues, body];
    } else if (head === 'match') {
      return lispMatch (args, env);
    } else {
      // Usual fn application
      const [ehead, ...eargs] = obj.map((x) => lispEvaluate(x, env));
      return lispApply (ehead, eargs);
    }
  } else if (isAtom (obj)) {
    if (obj.startsWith('{}'[0])) {
      // string literal
      return obj;
    } else if (arity[obj] !== undefined) return obj;
    else if (env[obj] !== undefined) return env[obj];
    else return null;
  } else {
    return obj;
  }
}

function lispApply (head, args) {
  // head, args are already evaluated

  if (operators[head]) {
    if (arity[head] === args.length || arity[head] === 'VARIABLE') {
      return operators[head](...args);
    } else return null;  // TODO make this non-silent
  } else if (! isList (head)) {
    return null;
  } else {
    const [cln, params, capturedValues, body] = head;

    if (cln !== ':') return null;

    const subEnv = {};
    // assign captured values
    for (const [a, b] of capturedValues) subEnv[a] = b;

    // assign params
    if (isAtom (params)) subEnv[params] = args;
    else {
      for (let i = 0; i < params.length; i++) subEnv[params[i]] = args[i];
    }

    // assign self, to care for recursion
    subEnv['fn'] = head;

    // Run in subEnv
    let v = null;
    for (const a of body) {
      v = lispEvaluate (a, subEnv);
    }
    return v;
  }
}

function lispMatch (args, env) {
  // a match statement, without the head "match".
  // args = [obj, [case1, repl1], [case2, repl2], ..., [caseN, replN]]

  if (args.length == 0) return null;

  const [obj, ... arrows] = args;
  const value = lispEvaluate(obj, env);

  for (const arr of arrows) {
    const [a, b] = arr;
    const m = lispM (value, a, env);
    if (m) {
      return lispEvaluate (b, lispJoinEnv (m, env));
    } else continue;
  }
  return null;
}

function lispM (value, pattern, env) {
  // Returns a map if it matches, otherwise null;

  if (pattern === '_') return {};

  if (isAtom (pattern)) {
    // just match
    return {[pattern]: value};
  }

  if (isAtomic (pattern)) {
    // must be equal
    if (pattern === value) return {}; else return null;
  }

  // Should be a list for now.
  if (! isList (pattern)) return null;

  // List
  if (pattern.length == 0) {
    if (isList(value) && value.length == 0) return {}; else return null;
  }

  const [ph, ...pargs] = pattern;

  // Cases of a list pattern
  if (! isAtom (ph)) return null;

  if (ph === '=') {
    const targetValue = lispEvaluate (pargs[0], env);
    if (eq (targetValue, value)) return {}; else return null;
  } else if (ph === 'var') {
    return {[pargs[0]]: value};
  } else if (ph === 'list:') {
    if (!isList (value)) return null;
    // in-place matching, except when one of them is a spread
    let spreadIndex = -1;
    for (let i = 0; i < pargs.length; i++) {
      if (isList(pargs[i]) && pargs[i][0] === 'spread') {
        // register spread
        if (spreadIndex < 0) spreadIndex = i; else return null; // pattern fails if multiple spreads
      }
    }
    const isSpread = spreadIndex >= 0;
    if (!isSpread) {
      if (pargs.length !== value.length) return null;
      let m = {};
      for (let i = 0; i < pargs.length; i++) {
        const subM = lispM (value[i], pargs[i], env);
        m = mergeMatches (m, subM);
        if (!m) return null;
      }
      return m;
    } else {
      if (pargs.length - 1 > value.length) return null;
      const prefixLength = spreadIndex;
      const suffixLength = pargs.length - spreadIndex - 1;
      // Matches each prefix with suffix
      let m = {};
      for (let i = 0; i < prefixLength; i++) {
        const subM = lispM (value[i], pargs[i], env);
        m = mergeMatches (m, subM);
        if (!m) return null;
      }
      for (let i = 0; i < suffixLength; i++) {
        const subM = lispM (value[value.length - 1 - i], pargs[pargs.length - 1 - i], env);
        m = mergeMatches (m, subM);
        if (!m) return null;
      }
      const subM = lispM (
        value.slice (prefixLength, value.length - suffixLength),
        pargs[spreadIndex][1],
        env,
      );
      m = mergeMatches (m, subM);
      return m;
    }
  } else if (ph === 'f') {
    // TODO later.
    // apply f before, and see if it satisfies.
  } else if (ph === 'sat') {
  } else if (ph === 'and') {
  } else if (ph === 'or') {
  } else if (ph === 'not') {
  } else if (ph === 'guard') {
  } else return null;
}

function lispJoinEnv (firstEnv, secondEnv) {
  const ans = {};
  // firstEnv takes priority, so it may overwrite secondEnv!
  for (const e of [secondEnv, firstEnv]) {
    for (const k of Object.keys(e)) {
      const v = e[k];
      ans[k] = v;
    }
  }
  return ans;
}

function mergeMatches (m1, m2) {
  if (!m1 || !m2) return null;
  const ans = {};
  for (m of [m1, m2]) {
    for (k of Object.keys(m)) {
      if (k in ans) {
        if (! eq (ans[k], m[k])) return null;  // mismatch
        else {} // do nothing
      } else {
        ans[k] = m[k];
      }
    }
  }
  return ans;
}

// console.log(lispEvaluate(preproDeepParse('(+ 3 4)')))

// The following commented line must be kept, because it is used by build_lisp_worker.py to create a worker.

onmessage = (e) => {const data = preproDeepParse(e.data); postMessage(str(lispEvaluate(data)));}
';
